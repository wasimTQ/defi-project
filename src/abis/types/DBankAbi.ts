/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface DBankAbiInterface extends utils.Interface {
  contractName: "DBankAbi";
  functions: {
    "collateralEther(address)": FunctionFragment;
    "depositStart(address)": FunctionFragment;
    "etherBalanceOf(address)": FunctionFragment;
    "isBorrowed(address)": FunctionFragment;
    "isDeposited(address)": FunctionFragment;
    "deposit()": FunctionFragment;
    "withdraw()": FunctionFragment;
    "borrow()": FunctionFragment;
    "payOff()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "collateralEther",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "depositStart",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "etherBalanceOf",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "isBorrowed", values: [string]): string;
  encodeFunctionData(functionFragment: "isDeposited", values: [string]): string;
  encodeFunctionData(functionFragment: "deposit", values?: undefined): string;
  encodeFunctionData(functionFragment: "withdraw", values?: undefined): string;
  encodeFunctionData(functionFragment: "borrow", values?: undefined): string;
  encodeFunctionData(functionFragment: "payOff", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "collateralEther",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "depositStart",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "etherBalanceOf",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isBorrowed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isDeposited",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "withdraw", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "payOff", data: BytesLike): Result;

  events: {
    "Borrow(address,uint256,uint256)": EventFragment;
    "Deposit(address,uint256,uint256)": EventFragment;
    "PayOff(address,uint256)": EventFragment;
    "Withdraw(address,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PayOff"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Withdraw"): EventFragment;
}

export type BorrowEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  {
    user: string;
    collateralEtherAmount: BigNumber;
    borrowedTokenAmount: BigNumber;
  }
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export type DepositEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { user: string; etherAmount: BigNumber; timeStart: BigNumber }
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export type PayOffEvent = TypedEvent<
  [string, BigNumber],
  { user: string; fee: BigNumber }
>;

export type PayOffEventFilter = TypedEventFilter<PayOffEvent>;

export type WithdrawEvent = TypedEvent<
  [string, BigNumber, BigNumber, BigNumber],
  {
    user: string;
    etherAmount: BigNumber;
    depositTime: BigNumber;
    interest: BigNumber;
  }
>;

export type WithdrawEventFilter = TypedEventFilter<WithdrawEvent>;

export interface DBankAbi extends BaseContract {
  contractName: "DBankAbi";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: DBankAbiInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    collateralEther(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    depositStart(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    etherBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    isBorrowed(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDeposited(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    borrow(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    payOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  collateralEther(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  depositStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  etherBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  isBorrowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  isDeposited(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  deposit(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdraw(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  borrow(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  payOff(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    collateralEther(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    etherBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowed(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    isDeposited(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    deposit(overrides?: CallOverrides): Promise<void>;

    withdraw(overrides?: CallOverrides): Promise<void>;

    borrow(overrides?: CallOverrides): Promise<void>;

    payOff(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Borrow(address,uint256,uint256)"(
      user?: string | null,
      collateralEtherAmount?: null,
      borrowedTokenAmount?: null
    ): BorrowEventFilter;
    Borrow(
      user?: string | null,
      collateralEtherAmount?: null,
      borrowedTokenAmount?: null
    ): BorrowEventFilter;

    "Deposit(address,uint256,uint256)"(
      user?: string | null,
      etherAmount?: null,
      timeStart?: null
    ): DepositEventFilter;
    Deposit(
      user?: string | null,
      etherAmount?: null,
      timeStart?: null
    ): DepositEventFilter;

    "PayOff(address,uint256)"(
      user?: string | null,
      fee?: null
    ): PayOffEventFilter;
    PayOff(user?: string | null, fee?: null): PayOffEventFilter;

    "Withdraw(address,uint256,uint256,uint256)"(
      user?: string | null,
      etherAmount?: null,
      depositTime?: null,
      interest?: null
    ): WithdrawEventFilter;
    Withdraw(
      user?: string | null,
      etherAmount?: null,
      depositTime?: null,
      interest?: null
    ): WithdrawEventFilter;
  };

  estimateGas: {
    collateralEther(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    depositStart(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    etherBalanceOf(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isBorrowed(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDeposited(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    borrow(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    payOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    collateralEther(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    depositStart(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    etherBalanceOf(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isBorrowed(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isDeposited(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    deposit(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdraw(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    borrow(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    payOff(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
