/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

export interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type Borrow = ContractEventLog<{
  user: string;
  collateralEtherAmount: string;
  borrowedTokenAmount: string;
  0: string;
  1: string;
  2: string;
}>;
export type Deposit = ContractEventLog<{
  user: string;
  etherAmount: string;
  timeStart: string;
  0: string;
  1: string;
  2: string;
}>;
export type PayOff = ContractEventLog<{
  user: string;
  fee: string;
  0: string;
  1: string;
}>;
export type Withdraw = ContractEventLog<{
  user: string;
  etherAmount: string;
  depositTime: string;
  interest: string;
  0: string;
  1: string;
  2: string;
  3: string;
}>;

export interface DBankAbi extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): DBankAbi;
  clone(): DBankAbi;
  methods: {
    collateralEther(arg0: string): NonPayableTransactionObject<string>;

    depositStart(arg0: string): NonPayableTransactionObject<string>;

    etherBalanceOf(arg0: string): NonPayableTransactionObject<string>;

    isBorrowed(arg0: string): NonPayableTransactionObject<boolean>;

    isDeposited(arg0: string): NonPayableTransactionObject<boolean>;

    deposit(): PayableTransactionObject<void>;

    withdraw(): NonPayableTransactionObject<void>;

    borrow(): PayableTransactionObject<void>;

    payOff(): NonPayableTransactionObject<void>;
  };
  events: {
    Borrow(cb?: Callback<Borrow>): EventEmitter;
    Borrow(options?: EventOptions, cb?: Callback<Borrow>): EventEmitter;

    Deposit(cb?: Callback<Deposit>): EventEmitter;
    Deposit(options?: EventOptions, cb?: Callback<Deposit>): EventEmitter;

    PayOff(cb?: Callback<PayOff>): EventEmitter;
    PayOff(options?: EventOptions, cb?: Callback<PayOff>): EventEmitter;

    Withdraw(cb?: Callback<Withdraw>): EventEmitter;
    Withdraw(options?: EventOptions, cb?: Callback<Withdraw>): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(event: "Borrow", cb: Callback<Borrow>): void;
  once(event: "Borrow", options: EventOptions, cb: Callback<Borrow>): void;

  once(event: "Deposit", cb: Callback<Deposit>): void;
  once(event: "Deposit", options: EventOptions, cb: Callback<Deposit>): void;

  once(event: "PayOff", cb: Callback<PayOff>): void;
  once(event: "PayOff", options: EventOptions, cb: Callback<PayOff>): void;

  once(event: "Withdraw", cb: Callback<Withdraw>): void;
  once(event: "Withdraw", options: EventOptions, cb: Callback<Withdraw>): void;
}
